#!/usr/bin/env bash
#
#
# Copyright (c) 2022 Seagate Technology LLC and/or its Affiliates
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#
# -*- coding: utf-8 -*-

# set -x
set -e

SCRIPT_PATH="$(readlink -f "$0")"
SCRIPT_DIR="${SCRIPT_PATH%/*}"

_get_cluster_params() {
    HCTL_STATUS=$(hctl status)

    for hn in $(hostname -A); do
        if echo "$HCTL_STATUS" | grep "$hn" > /dev/null; then
            local host=$hn
            break
        fi

    done

    local addr="([0-9]+[.][0-9]+[.][0-9]+[.][0-9]+)"
    local addr_ext='.* ([0-9]+[.][0-9]+[.][0-9]+[.][0-9]+@.+:[0-9]{5}:[0-9]{2}:).*'
    local addr_extp='.* ([0-9]+[.][0-9]+[.][0-9]+[.][0-9]+@.+:[0-9]{5}:[0-9]{2}:[0-9]+).*'

    NODE_IP=$(echo "$HCTL_STATUS" | grep "$host" -A 1 | grep -E -o "$addr")
    APP_IP_EXT=$(echo "$HCTL_STATUS" | grep "$NODE_IP" | grep m0_client \
        | sed -E "s/:[0-9]+$/:/" | awk '{print $NF}' | head -1)

    HALON_IP_EXT=$(echo "$HCTL_STATUS" | grep hax | grep "$NODE_IP" | awk '{print $4}')
    CONFD_IP_EXT=$(echo "$HCTL_STATUS" | grep confd | grep "$NODE_IP" | awk '{print $4}')

    MOTR_PORTS=$(echo "$HCTL_STATUS" | grep "$NODE_IP" | grep m0_client | grep unknown \
        | awk '{print $4}' | awk -F: '{print $NF}')

    # for old hctl version
    CLUSTER_PROFILE=$(echo "$HCTL_STATUS" | grep 'Profile:' | awk '{print $2}')

    # for new hctl version
    if [[ -z "$CLUSTER_PROFILE" ]]; then
        CLUSTER_PROFILE=$(echo "$HCTL_STATUS" | grep -A2 'Profile:' | grep '0x' | awk '{print $1}')
    fi

    IOS_FID=$(echo "$HCTL_STATUS" | grep "\[.*\].*ioservice" | grep "${NODE_IP}" \
        | awk '{print $3}')
}

_iter_m0crate_params() {
    local all_params=$(cat "${SCRIPT_DIR}"/test_io.yaml.template \
       | grep -P -o "###__.+=.+__###"                \
       | sed -E "s/###__(.*=.*)__###/\1/g")

    for param_eq in $all_params; do
        case $1 in
            ev) eval "$param_eq";;
            pr) echo "$param_eq";;
            *);;
        esac
    done
}

_set_default_m0crate_params() {
    MOTR_CONFD_ADDR=$CONFD_IP_EXT
    MOTR_HA_ADDR=$HALON_IP_EXT
    PROF=$CLUSTER_PROFILE

    _iter_m0crate_params ev
}

_parse_m0crate_params() {
    for x in "$@"; do
        eval "$x";
    done

    return 0
}

_set_m0crate_config_file_params() {
    local config_file=$1

    local all_params=$(cat "${SCRIPT_DIR}"/test_io.yaml.template        \
               | grep -P -o "###__.+__###"                          \
               | sed -E "s/###__([^=]*?)={0,1}(.*?){0,1}__###/\1/")

    for param_name in $all_params; do
        local param_value=${!param_name}
        echo "set parameter: ${param_name}=${param_value}"

        [[ -n $param_value ]] || {
            echo "parameter $param_name not found"
            exit 1
        }

        sed -i -E "s/###__${param_name}={0,1}(.*?){0,1}__###/${param_value}/" \
            "${config_file}"
    done
}

prepare_and_run() {

    random_file="/tmp/128M"
    rm -f $random_file
    dd if=/dev/urandom of=$random_file bs=1M count=128 &> /dev/null
    _set_default_m0crate_params
    _parse_m0crate_params $@

    if [[ -z "$NR_INSTANCES_PER_NODE" ]]; then
        NR_INSTANCES_PER_NODE="1"
    fi

    # reduce list of motr ports to amount specified by user
    MOTR_PORTS=$(echo "$MOTR_PORTS" | head -$NR_INSTANCES_PER_NODE)

    local m0crate_pids=""

    for motr_port in $MOTR_PORTS; do
        local logfile="m0crate.$motr_port.$(hostname).log"

        MOTR_LOCAL_ADDR_EXT=${APP_IP_EXT}${motr_port}
        PROCESS_FID=$(echo "$HCTL_STATUS" | grep m0_client \
                | grep "$MOTR_LOCAL_ADDR_EXT" | awk '{print $3}')

        local m0crate_conf="$(pwd)/test_io.$motr_port.$(hostname -s).yaml"
        cp "$SCRIPT_DIR"/test_io.yaml.template "$m0crate_conf"
        _set_m0crate_config_file_params "$m0crate_conf" > "$logfile"

        m0crate -S "$m0crate_conf" &>> "$logfile" &
        m0crate_pids="$m0crate_pids $!"
    done

    wait "$m0crate_pids"

    rm -f $random_file
}


_get_cluster_params
prepare_and_run "$@"

