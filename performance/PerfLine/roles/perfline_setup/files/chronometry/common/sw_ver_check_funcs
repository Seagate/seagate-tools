#!/usr/bin/env bash
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#


set -x

function commit_cmp() {
    local commit_a="$1"
    local commit_b="$2"
    local short_len=7

    if [[ "${#commit_a}" != "${#commit_b}" ]]; then
        commit_a=`echo $commit_a | cut -c1-${short_len}`
        commit_b=`echo $commit_b | cut -c1-${short_len}`
    fi

    if [[ "$commit_a" == "$commit_b" ]]; then
        return 0;
    else
        return 1;
    fi
}

function check_motr_version() {
    local required_git_commit="$1"
    local required_configure_opts="$2"

    local m0d_bin="$MOTR_SRC_DIR/utils/m0d"

    if [[ ! -f "$m0d_bin" ]]; then
        echo "file not found: $m0d_bin"
        return 1
    fi

    local motr_version=$($m0d_bin -v)

    local git_commit=$(echo "$motr_version" | grep "Git revision" \
        | awk -F ':' '{print $2}' | sed 's/ //g')

    local configure_opts=$(echo "$motr_version" | grep "CONFIGURE OPTS" \
        | awk -F ':' '{print $2}' | sed "s/^[ \t]*//" | tr -d \' )

    echo "git_commit: [$git_commit]"
    echo "configure_opts: [$configure_opts]"

    if ! commit_cmp $git_commit $required_git_commit; then
        echo "current git commit isn't equal to required one"
        return 1
    fi

    if [[ "$configure_opts" != "$required_configure_opts" ]]; then
        echo "current build options aren't equal to required"
        return 1
    fi

    return 0
}

function check_s3server_version() {
    local build_info_file="/opt/seagate/cortx/s3/bin/s3server_build_info"
    local s3server_bin="/opt/seagate/cortx/s3/bin/s3server"

    local required_git_commit="$1"

    if [[ ! -f "$build_info_file" ]]; then
        echo "not found file: $build_info_file"
        return 1
    fi

    if [[ ! -f "$s3server_bin" ]]; then
        echo "not found s3server bin: $s3server_bin"
        return 1
    fi

    local saved_git_commit=$(cat "$build_info_file" | grep 'git_commit' \
        | awk -F ':' '{print $2}')

    local saved_modify_time=$(cat "$build_info_file" | grep 'modify_unixtime' \
        | awk -F ':' '{print $2}')

    local modify_time=$(stat -c '%Y' $s3server_bin)

    if [[ "$modify_time" != "$saved_modify_time" ]]; then
        echo "file was modified: $s3server_bin"
        return 1
    fi

    if ! commit_cmp $saved_git_commit $required_git_commit; then
        echo "current git commit isn't equal to required one"
        return 1
    fi

    return 0
}

function update_s3server_build_info() {
    local build_info_file="/opt/seagate/cortx/s3/bin/s3server_build_info"
    local s3server_bin="/opt/seagate/cortx/s3/bin/s3server"

    local git_commit="$1"
    local modify_unixtime=$(stat -c '%Y' $s3server_bin)

    echo "git_commit:$git_commit" > $build_info_file
    echo "modify_unixtime:$modify_unixtime" >> $build_info_file
}
