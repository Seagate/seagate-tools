#
#
# Copyright (c) 2022 Seagate Technology LLC and/or its Affiliates
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#
# -*- coding: utf-8 -*-

---
  - name: "Creating artifacts directory {{ ARTIFACTS_DIR }}"
    file:
      path: '{{ ARTIFACTS_DIR }}'
      state: directory
    delegate_to: "{{ item }}"
    with_items: "{{ groups['all'] }}"

  - name: "Creating directory for night builds {{ NIGHT_ARTIFACTS }}"
    file:
      path: '{{ NIGHT_ARTIFACTS }}'
      state: directory
    delegate_to: "{{ item }}"
    with_items: "{{ groups['all'] }}"

  - name: "Creating perfline directory {{ PERFLINE_DIR }}"
    file:
      path: "{{ PERFLINE_DIR }}/bin"
      state: directory
      recurse: yes
    delegate_to: "{{ item }}"
    with_items: "{{ groups['all'] }}"

  - name: "Compress directory files/wrapper into files/wrapper.tar.gz"
    archive:
      path: "{{ role_path }}/files/wrapper"
      dest: "{{ role_path }}/files/wrapper.tar.gz"

  - name: "Copy perfline wrapper scripts"
    unarchive:
      src: "{{ role_path }}/files/wrapper.tar.gz"
      dest: "{{ PERFLINE_DIR }}"
    delegate_to: "{{ item }}"
    with_items: "{{ groups['all'] }}"

  - name: "Compress directory files/s3account into files/s3account.tar.gz"
    archive:
      path: "{{ role_path }}/files/s3account"
      dest: "{{ role_path }}/files/s3account.tar.gz"

  - name: "Copy s3account setup scripts"
    unarchive:
      src: "{{ role_path }}/files/s3account.tar.gz"
      dest: "{{ PERFLINE_DIR }}"
    delegate_to: "{{ item }}"
    with_items: "{{ groups['all'] }}"

  - name: "Create List of nodes to be added into Cluster"
    set_fact: nodelist={%for host in groups['nodes']%}{{hostvars[host]['ansible_host']}}{% if not loop.last %},{% endif %}{% endfor %}

  - name: "Updating value of a variables in perfline.conf"
    lineinfile:
       path: "{{ role_path }}/files/perfline.conf"
       regexp: "^{{ item.variable }}"
       line: "{{ item.variable }}='{{ item.value }}'"
    with_items:
       - { variable: 'HA_TYPE', value: '{{ ha_type }}'}
       - { variable: 'NODES', value: '{{ nodelist }}' }
       - { variable: 'PERFLINE_DIR', value: '{{ PERFLINE_DIR }}'}
       - { variable: 'WORKLOAD_DIR', value: '{{ PERFLINE_DIR }}/wrapper/workload'}
       - { variable: 'VALIDATOR', value: '{{ PERFLINE_DIR }}/wrapper/core'}
       - { variable: 'LOGFILE', value: '{{ PERFLINE_LOGFILE }}'}
       - { variable: 'ARTIFACTS_DIR', value: '{{ ARTIFACTS_DIR }}'}
       - { variable: 'NIGHT_ARTIFACTS', value: '{{ NIGHT_ARTIFACTS }}'}
       - { variable: 'PUBLIC_DATA_INTERFACE_NAME', value: '{{ PUBLIC_DATA_INTERFACE_NAME }}'}
       - { variable: 'DISK', value: '{{ disk }}' }
       - { variable: 'CORTX_RE_REPO', value: '{{ cortx_re_repo }}'}
       - { variable: 'CORTX_BUILD_IMAGE', value: '{{ cortx_build_image }}'}
       - { variable: 'BACKUP_NFS_LOCATION', value: '{{ backup_nfs_location }}'}
       - { variable: 'STORAGE_CONTROLLER_LOGIN', value: '{{ storage_controller_login }}'}
       - { variable: 'STORAGE_CONTROLLER_PASSWORD', value: '{{ storage_controller_password }}'}
       - { variable: 'CORTX_K8S_REPO', value: '{{ cortx_k8s_repo }}'}

  - name: "Updating numeric values of a variables in perfline.conf"
    lineinfile:
       path: "{{ role_path }}/files/perfline.conf"
       regexp: "^{{ item.variable }}"
       line: "{{ item.variable }}={{ item.value }}"
    with_items:
       - { variable: 'PERFLINE_UI_PORT', value: '{{ perfline_ui_port }}' }

  - name: "Installing golang version above 1.15 on localhost"
    yum:
      name: go >= 1.15
      state: present

  - name: "Generating S3bench binary files"
    shell: GO111MODULE=on go get github.com/Seagate/s3bench@{{ S3BENCH_COMMIT_ID }}

  - name: "Copy new s3bench binary file to client machine"
    copy:
       src: "/root/go/bin/s3bench"
       dest: "{{ PERFLINE_DIR }}/bin/s3bench_perfline"
       mode: '0751'
    delegate_to: "client-1"

  - name: "Copy rgw_addb_plugin.so file to client machine"
    copy:
       src: "{{ role_path }}/files/rgw_addb_plugin.so"
       dest: "{{ PERFLINE_DIR }}/bin/rgw_addb_plugin.so"
       mode: '0751'
    delegate_to: "client-1"
