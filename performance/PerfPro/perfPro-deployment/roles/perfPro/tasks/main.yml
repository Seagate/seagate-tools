---
# tasks file for perfPro
 
 - name: Updating hosts files
   script: files/update_hosts.sh {{ CLIENT }} {{ NODE1 }} {{ NODE2 }}
  
 - meta: refresh_inventory

 - name: Refreshing "known hosts"
   command: sed -i "/{{ hostvars[item]['ansible_host'] }}/d" /root/.ssh/known_hosts
   with_items: "{{ groups['allserver'] }}"

 - name: Enabled passwordless authentication
   script: files/automatePasswordless.sh {{ hostvars[item]['ansible_user'] }} {{ hostvars[item]['ansible_host'] }} {{ CLUSTER_PASS }}
   with_items: "{{ groups['allserver'] }}"

 - debug:
      msg: "{{ hostvars[item]['ansible_host'] }}"
   with_items: "{{ groups['s3server'] }}"

 - name: Re-image node {{ hostvars[groups['s3server'][0]]['ansible_host'] }} using satellite API 
   shell: "curl --user srvcqa1:Y2ecGgVJsK57dYdm -k -H \"Content-Type:application/json\" -H \"Accept:application/json\" -X PUT -d '{\"host\":{\"build\": \"true\"}}' https://ssc-satellite1.colo.seagate.com/api/v2/hosts/{{ hostvars[groups['s3server'][0]]['ansible_host'] }} | jq -r '.build'"
   when: REIMAGE == "yes"

 - name: power reset node {{ hostvars[groups['s3server'][0]]['ansible_host'] }} using satellite API
   shell: "curl --user srvcqa1:Y2ecGgVJsK57dYdm -k -H \"Content-Type:application/json\" -H \"Accept:application/json\" -X PUT -d '{\"power_action\": \"reset\"}' https://ssc-satellite1.colo.seagate.com/api/v2/hosts/{{ hostvars[groups['s3server'][0]]['ansible_host'] }}/power | jq"
   when: REIMAGE == "yes"

 - name: Re-image node {{ hostvars[groups['s3server'][1]]['ansible_host'] }} using satellite API
   shell: "curl --user srvcqa1:Y2ecGgVJsK57dYdm -k -H \"Content-Type:application/json\" -H \"Accept:application/json\" -X PUT -d '{\"host\":{\"build\": \"true\"}}' https://ssc-satellite1.colo.seagate.com/api/v2/hosts/{{ hostvars[groups['s3server'][1]]['ansible_host'] }} | jq -r '.build'"
   when: REIMAGE == "yes" 

 - name: power reset node {{ hostvars[groups['s3server'][1]]['ansible_host'] }} using satellite API
   shell: "curl --user srvcqa1:Y2ecGgVJsK57dYdm -k -H \"Content-Type:application/json\" -H \"Accept:application/json\" -X PUT -d '{\"power_action\": \"reset\"}' https://ssc-satellite1.colo.seagate.com/api/v2/hosts/{{ hostvars[groups['s3server'][1]]['ansible_host'] }}/power | jq"
   when: REIMAGE == "yes"

 - name: check re-image status
   script: files/check_re-image_status.sh {{ hostvars[groups['s3server'][0]]['ansible_host'] }} {{ hostvars[groups['s3server'][1]]['ansible_host'] }} 
   when: REIMAGE == "yes"
 
 - name: Refreshing "known hosts"
   command: sed -i "/{{ hostvars[item]['ansible_host'] }}/d" /root/.ssh/known_hosts 
   with_items: "{{ groups['s3server'] }}"
   when: REIMAGE == "yes"
 
 - name: Wait for server to restart
   wait_for:
       host={{ hostvars[item]['ansible_host'] }}
       port=22
       delay=15
       timeout=900
   become: false
   with_items: "{{ groups['s3server'] }}"
   when: REIMAGE == "yes"

 - name: Enabled passwordless authentication
   script: files/automatePasswordless.sh {{ hostvars[item]['ansible_user'] }} {{ hostvars[item]['ansible_host'] }} {{ CLUSTER_PASS }}
   with_items: "{{ groups['s3server'] }}"
   when: REIMAGE == "yes"

 - name: cloning scripts for pre-requisite steps to configure s3 cluster 
   shell: curl {{ AUTO_DEPLOY_URL }} -o auto-deploy-eos; chmod a+x auto-deploy-eos; curl {{ PREREQ_URL }} -o cortx-prereqs.sh; chmod a+x cortx-prereqs.sh;
   delegate_to: "{{ item }}"
   with_items: "{{ groups['s3server'] }}"

 - name: Trigger cortx-prereqs.sh and reboot {{ hostvars[groups['s3server'][1]]['ansible_host'] }}
   command: ./cortx-prereqs.sh --disable-sub-mgr
   ignore_errors: true
   become: true
   delegate_to: "{{ groups['s3server'][1] }}"

 - name: Trigger cortx-prereqs.sh and reboot {{ hostvars[groups['s3server'][0]]['ansible_host'] }}
   command: ./cortx-prereqs.sh --disable-sub-mgr
   ignore_errors: true
   become: true
   delegate_to: "{{ groups['s3server'][0] }}"

 - name: Wait for server to restart
   wait_for:
       host={{ hostvars[item]['ansible_host'] }}
       port=22
       delay=15
       timeout=900
   become: false
   with_items: "{{ groups['s3server'] }}"

 - name: Cluster deployment
   shell: ./auto-deploy-eos -s {{ hostvars[groups['s3server'][0]]['ansible_host'] }} -p '{{ CLUSTER_PASS }}' -C {{ CLUSTER_IP }} -V {{ MGMT_VIP }} -n {{ PUB_NIC }} -N {{ PRIVATE_NIC }} -i {{ DATA_IP_NODE1 }} -I {{ DATA_IP_NODE2 }} -A {{ CONTROLLER_A_IP }} -B {{ CONTROLLER_B_IP }} -U {{ CONTROLLER_USER }} -P '{{ CONTROLLER_PASS }}' --m1 '{{ BMC_USER }}' --b1 '{{ BMC_PASS }}' --m2 '{{ BMC_USER }}' --b2 '{{ BMC_PASS }}' -t {{ BUILD_URL }}
   delegate_to: "{{ groups['s3server'][1] }}"
