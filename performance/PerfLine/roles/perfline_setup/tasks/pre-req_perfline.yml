---
  - name: "Creating artifacts directory {{ ARTIFACTS_DIR }}"
    file:
      path: '{{ ARTIFACTS_DIR }}'
      state: directory
    delegate_to: "{{ item }}"
    with_items: "{{ groups['all'] }}"

  - name: "Creating directory for night builds {{ NIGHT_ARTIFACTS }}"
    file:
      path: '{{ NIGHT_ARTIFACTS }}'
      state: directory
    delegate_to: "{{ item }}"
    with_items: "{{ groups['all'] }}"
    
  - name: "Creating perfline directory {{ PERFLINE_DIR }}"
    file:
      path: "{{ PERFLINE_DIR }}/bin"
      state: directory
      recurse: yes
    delegate_to: "{{ item }}"
    with_items: "{{ groups['all'] }}"

  - name: "Compress directory files/wrapper into files/wrapper.tar.gz"
    archive:
      path: "{{ role_path }}/files/wrapper"
      dest: "{{ role_path }}/files/wrapper.tar.gz"

  - name: "Copy perfline wrapper scripts"
    unarchive:
      src: "{{ role_path }}/files/wrapper.tar.gz"
      dest: "{{ PERFLINE_DIR }}"
    delegate_to: "{{ item }}"
    with_items: "{{ groups['all'] }}"


  - name: "Compress directory files/s3account into files/s3account.tar.gz"
    archive:
      path: "{{ role_path }}/files/s3account"
      dest: "{{ role_path }}/files/s3account.tar.gz"

  - name: "Copy s3account setup scripts"
    unarchive:
      src: "{{ role_path }}/files/s3account.tar.gz"
      dest: "{{ PERFLINE_DIR }}"
    delegate_to: "{{ item }}"
    with_items: "{{ groups['all'] }}"
    
  - name: "Create List of nodes to be added into Cluster"
    set_fact: nodelist={%for host in groups['nodes']%}{{hostvars[host]['ansible_host']}}{% if not loop.last %},{% endif %}{% endfor %}

  - name: "Updating value of a variables in perfline.conf"
    lineinfile:
       path: "{{ role_path }}/files/perfline.conf"
       regexp: "^{{ item.variable }}"
       line: "{{ item.variable }}='{{ item.value }}'"
    with_items:
       - { variable: 'HA_TYPE', value: '{{ ha_type }}'}
       - { variable: 'NODES', value: '{{ nodelist }}' }
       - { variable: 'PERFLINE_DIR', value: '{{ PERFLINE_DIR }}'}
       - { variable: 'WORKLOAD_DIR', value: '{{ PERFLINE_DIR }}/wrapper/workload'}
       - { variable: 'VALIDATOR', value: '{{ PERFLINE_DIR }}/wrapper/core'}
       - { variable: 'LOGFILE', value: '{{ PERFLINE_LOGFILE }}'}
       - { variable: 'ARTIFACTS_DIR', value: '{{ ARTIFACTS_DIR }}'}
       - { variable: 'NIGHT_ARTIFACTS', value: '{{ NIGHT_ARTIFACTS }}'}
       - { variable: 'PUBLIC_DATA_INTERFACE_NAME', value: '{{ PUBLIC_DATA_INTERFACE_NAME }}'}
       - { variable: 'DISK', value: '{{ disk }}' }

  - name: "Updating numeric values of a variables in perfline.conf"
    lineinfile:
       path: "{{ role_path }}/files/perfline.conf"
       regexp: "^{{ item.variable }}"
       line: "{{ item.variable }}={{ item.value }}"
    with_items:
       - { variable: 'PERFLINE_UI_PORT', value: '{{ perfline_ui_port }}' }


  - name: "Installing golang version above 1.15 on localhost"
    yum:
      name: go >= 1.15
      state: present

  - name: "Generating S3bench binary files"
    shell: GO111MODULE=on go get github.com/Seagate/s3bench@{{ S3BENCH_COMMIT_ID }}

  - name: "Copy new s3bench binary file to client machine"
    copy:
       src: "/root/go/bin/s3bench"
       dest: "{{ PERFLINE_DIR }}/bin/s3bench_perfline"
       mode: '0751'
    delegate_to: "client-1"



  - name: "Installing cortx-s3iamcli"
    yum:
      name: cortx-s3iamcli
      state: present
    delegate_to: "client-1" 
      
