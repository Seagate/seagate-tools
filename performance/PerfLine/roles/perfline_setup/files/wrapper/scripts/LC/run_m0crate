#!/usr/bin/env bash
#
#
# Copyright (c) 2022 Seagate Technology LLC and/or its Affiliates
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#
# -*- coding: utf-8 -*-

set -x
set -e

SCRIPT_PATH="$(readlink -f "$0")"
SCRIPT_DIR="${SCRIPT_PATH%/*}"

source "$SCRIPT_DIR/../../../perfline.conf"

SOLUTION_CONFIG="$CORTX_K8S_REPO/k8_cortx_cloud/solution.yaml"
NAMESPACE=$(cat "$SOLUTION_CONFIG" | grep "namespace" | awk '{ print $2}')

CONTAINER="cortx-hax"
MOTR_CLIENT="cortx-motr-client-001"

_get_cluster_params() {
    local hostname="$1"
    CLIENT_POD=$(kubectl get pods -n "$NAMESPACE" | grep "$hostname" | grep cortx-client | awk '{print $1}')

    HCTL_STATUS=$(kubectl exec -n "$NAMESPACE" -it "$CLIENT_POD" -c "$CONTAINER" -- hctl status)

    HAX_IP_EXT=$(echo "$HCTL_STATUS" | grep "$hostname" | grep cortx-client \
         | grep hax | awk '{print $4}'| tr -d ' ' | tr -d '\r')

    MOTR_LOCAL_ADDR_EXT=$(echo "$HCTL_STATUS" | grep "$hostname" | grep motr_client \
         | sed -E "s/:[0-9]+$/:/" |  awk '{print $4}' | head -1 | tr -d ' ' | tr -d '\r')

    CLUSTER_PROFILE=$(echo "$HCTL_STATUS" \
         | grep 'Profile_the_pool' | awk '{ print $1}' | tr -d '\r')

    MOTR_PORTS=$(echo "$HCTL_STATUS" | grep "$hostname" | grep motr_client | grep -E 'unknown|offline' \
        | awk '{print $4}' | awk -F@ '{print $NF}' | head -1 | tr -d '\r')

}

_iter_m0crate_params() {
    local all_params=$(cat "${SCRIPT_DIR}"/../test_io.yaml.template \
       | grep -P -o "###__.+=.+__###"                \
       | sed -E "s/###__(.*=.*)__###/\1/g")

    for param_eq in $all_params; do
        case $1 in
            ev) eval "$param_eq";;
            pr) echo "$param_eq";;
            *);;
        esac
    done
}

_set_default_m0crate_params() {
    MOTR_HA_ADDR=$HAX_IP_EXT
    PROF=$CLUSTER_PROFILE

    _iter_m0crate_params ev
}

_parse_m0crate_params() {
    for x in "$@"; do
        eval "$x";
    done

    return 0
}

_set_m0crate_config_file_params() {
    local config_file=$1

    local all_params=$(cat "${SCRIPT_DIR}"/../test_io.yaml.template        \
               | grep -P -o "###__.+__###"                          \
               | sed -E "s/###__([^=]*?)={0,1}(.*?){0,1}__###/\1/")

    for param_name in $all_params; do
        local param_value=${!param_name}
        echo "set parameter: ${param_name}=${param_value}"

        [[ -n $param_value ]] || {
            echo "parameter $param_name not found"
            exit 1
        }
        echo "${param_value}"
        sed -i -E "s/###__${param_name}={0,1}(.*?){0,1}__###/${param_value}/" "${config_file}"
    done
}

prepare_and_run() {
    local TMP_M0CRATE_DIR="/tmp/m0crate"
    local iteration="$1"
    shift

    local hostname="$1"
    shift

    local src_data_file="/tmp/128M"
    _get_cluster_params "$hostname"
    kubectl exec -n "$NAMESPACE" -it "$CLIENT_POD" -c $MOTR_CLIENT -- rm -f $src_data_file
    kubectl exec -n "$NAMESPACE" -it "$CLIENT_POD" -c $MOTR_CLIENT -- dd if=/dev/urandom of="$src_data_file" bs=1M count=128 &> /dev/null
    _set_default_m0crate_params
    _parse_m0crate_params "$@"

    logfile="m0crate.$iteration.$MOTR_PORTS.$hostname.log"

    PROCESS_FID=$(echo "$HCTL_STATUS" | grep "${MOTR_LOCAL_ADDR_EXT}" | awk '{print $3}')

    rm -rf "$TMP_M0CRATE_DIR"
    mkdir "$TMP_M0CRATE_DIR"
    local m0crate_conf="$TMP_M0CRATE_DIR/test_io.$iteration.$MOTR_PORTS.$hostname.yaml"
    cp "$SCRIPT_DIR"/../test_io.yaml.template "$m0crate_conf"
    _set_m0crate_config_file_params "$m0crate_conf" > "$logfile"
    echo "$m0crate_conf"

    # create directory for m0crate
    # TODO check if /share/var/log/cortx exists
    local machine_id=$(kubectl exec -n "$NAMESPACE" "$CLIENT_POD" -- bash -c 'cat /etc/machine-id')
    local m0crate_dir="/share/var/log/cortx/m0crate/$iteration/$machine_id/m0crate-$PROCESS_FID"
    kubectl exec -n "$NAMESPACE" "$CLIENT_POD" -c $MOTR_CLIENT -- bash -c "mkdir -p $m0crate_dir"

    kubectl -n "$NAMESPACE" -c $MOTR_CLIENT cp "$m0crate_conf" "$CLIENT_POD":"$m0crate_dir"/test_io."$iteration"."$MOTR_PORTS"."$hostname".yaml
    kubectl exec -n "$NAMESPACE" "$CLIENT_POD" -c $MOTR_CLIENT -- bash -c "cd $m0crate_dir && m0crate -S test_io.$iteration.$MOTR_PORTS.$hostname.yaml" 2>&1 | tee "$TMP_M0CRATE_DIR/$logfile"

}

prepare_and_run "$@"
