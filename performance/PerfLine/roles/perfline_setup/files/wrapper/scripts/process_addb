#!/usr/bin/env bash
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#

set -e
set -x

SCRIPT_PATH="$(readlink -f $0)"
SCRIPT_DIR="${SCRIPT_PATH%/*}"
TOOLS_DIR="$SCRIPT_DIR/../../chronometry"

function main()
{
    parse_params "$@"

    if [[ "$APP" == "motr" ]]; then
        process_motr_addb
    elif [[ "$APP" == "s3server" ]]; then
        process_s3_addb
    elif [[ "$APP" == "m0crate" ]]; then

        if [[ -z "$M0CRATE_WORKDIR" ]]; then
            echo "M0CRATE_WORKDIR is not specified"
            return 1
        fi

        process_m0crate_addb $M0CRATE_WORKDIR
    else
        echo "unsupported app: $app"
    fi
}

parse_params()
{
    while [[ $# -gt 0 ]]; do
    
    case $1 in
        --host)
            ARTIF_HOST="$2"
            shift
            ;;
        --dir)
            ARTIF_DIR="$2"
            shift
            ;;
        --app)
            APP="$2"
            shift
            ;;
        --io-services)
            IO_SERVICES="$2"
            shift
            ;;
        --m0crate-workdir)
            M0CRATE_WORKDIR="$2"
            shift
            ;;
	--start)
	    START_TIME="$2"
	    shift
	    ;;
	--stop)
	    STOP_TIME="$2"
	    shift
	    ;;
    esac

    shift
    done
}

function process_motr_addb()
{
    local host="$(hostname -s)"

    MOTR_ADDB_DIR=$($SCRIPT_DIR/find_motr_addb_location.sh)

    local tmp_dir="$MOTR_ADDB_DIR/$(mktemp -u addb_tmp_XXXXXXX)"
    mkdir $tmp_dir
    pushd $tmp_dir

    for ios_fid in $IO_SERVICES; do
       local ios_dir="$MOTR_ADDB_DIR/m0d-$ios_fid"

        if [[ ! -d "$ios_dir" ]]; then
            continue
        fi

        local ios_addb_stobs="$ios_dir/addb-stobs-*/o/100000000000000:2" 

        for addb_stob in $ios_addb_stobs; do
            pid=$(echo $addb_stob | sed -E 's/.*addb-stobs-([0-9]+)[/].*/\1/')
            m0addb2dump -f -- "$addb_stob" > ./dumps_${host}_${pid}.txt
        done
    done

    # generate motr m0play.db 
    if ls dumps* &> /dev/null; then
        $TOOLS_DIR/../chronometry_v2/addb2db_multiprocess.sh --dumps ./dumps*
        local db_filename="m0play.db.$(hostname)"
        mv m0play.db $db_filename
        scp dumps* root@${ARTIF_HOST}:${ARTIF_DIR}
        scp $db_filename root@${ARTIF_HOST}:${ARTIF_DIR}
    fi

    popd
    rm -rf $tmp_dir
}

function process_s3_addb()
{
    local host="$(hostname -s)"
    local s3_addb_dir="/var/log/seagate/motr"

    local tmp_dir="$s3_addb_dir/$(mktemp -u addb_tmp_XXXXXXX)"
    mkdir $tmp_dir
    pushd $tmp_dir

    for addb_stob in /var/log/seagate/motr/s3server*/addb*/o/100000000000000:2; do
        pid=$(echo $addb_stob | sed -E 's/.*addb_([0-9]+)[/].*/\1/')
        m0addb2dump -f -p /opt/seagate/cortx/s3/addb-plugin/libs3addbplugin.so \
            -- "$addb_stob" > ./dumpc_${host}_${pid}.txt
    done

    # generate s3 m0play.db 
    if ls dumpc* &> /dev/null; then
        $TOOLS_DIR/../chronometry_v2/addb2db_multiprocess.sh --dumps ./dumpc*
        scp dumpc* root@${ARTIF_HOST}:${ARTIF_DIR}/$(hostname)
        scp m0play.db root@${ARTIF_HOST}:${ARTIF_DIR}/$(hostname)
    fi

    popd
    rm -rf $tmp_dir
}

function process_m0crate_addb()
{
    local m0crate_workdir="$1"
    local host="$(hostname -s)"

    pushd $m0crate_workdir

    for addb_stob in $m0crate_workdir/addb*/o/100000000000000:2; do
        pid=$(echo $addb_stob | sed -E 's/.*addb_([0-9]+)[/].*/\1/')
        m0addb2dump -f -- "$addb_stob" > ./dumpc_${host}_${pid}.txt
    done

    # generate m0crate m0play.db 
    if ls dumpc* &> /dev/null; then
        $TOOLS_DIR/../chronometry_v2/addb2db_multiprocess.sh --dumps ./dumpc*
        scp dumpc* root@${ARTIF_HOST}:${ARTIF_DIR}
        mv m0play.db m0play.$host.db
        scp m0play.$host.db root@${ARTIF_HOST}:${ARTIF_DIR}
    fi

    popd
}

main "$@"
exit $?
