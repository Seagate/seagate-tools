---
# tasks file for reform

  - name: "Shutdown cluster"
    command: hctl shutdown
    ignore_errors: true
    delegate_to: "srvnode-1"
  
  - name: "Update inventory"
    replace:
     path: "{{ playbook_dir }}/hosts"
     regexp: ".*build-server ansible_host=.*"
     replace: "build-server ansible_host={{ build_machine }}"
     
  - meta: refresh_inventory 

  - name: "Adding docker repository"
    command: yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
    delegate_to: "build-server"

  - name: "Installing Required packages"
    yum:
      name:
        - yum-utils
        - docker-ce
        - docker-ce-cli
        - containerd.io
      state: present 
    delegate_to: "build-server"

  - name: "Start docker services"
    service:
       name: docker
       state: started 
    delegate_to: "build-server"

  - name: "Clone motr, hare and s3server repository"
    git:
       repo: https://github.com/Seagate/cortx
       dest: /root/cortx
       clone: yes
       recursive: yes
       force: yes
    delegate_to: "build-server"

  - name: "Upgrading motr, hare and S3server with custom repo"
    shell: cd /root/cortx; rm -rf cortx-motr cortx-hare cortx-s3server
    delegate_to: "build-server"
    when: (motr_repo_path != "") and (hare_repo_path != "") and (s3server_repo_path != "")
    register: custom

  - name: "Login to GitHub Docker Registry"
    shell: echo {{ github_PAT }} | docker login ghcr.io -u {{ github_username }} --password-stdin
    delegate_to: "build-server"
    when: (github_PAT != "") and (github_username != "")
    register: gituser

  - name: "Git clone custom repo"
    shell: cd /root/cortx/; git clone {{ motr_repo_path }}; git clone {{ hare_repo_path }}; git clone {{ s3server_repo_path }}
    delegate_to: "build-server"
    when: custom is changed   

  - name: "Refresh motr repo based on {{ motr_commit_id }}"
    shell: cd /root/cortx/cortx-motr && git checkout {{ motr_commit_id }}
    delegate_to: "build-server"
    when: motr_commit_id != ""
    ignore_errors: true

  - name: "Refresh hare repo based on {{ hare_commit_id }}"
    shell: cd /root/cortx/cortx-hare && git checkout {{ hare_commit_id }}
    delegate_to: "build-server"
    when: hare_commit_id != ""
    ignore_errors: true

  - name: "Refresh s3server repo based on {{ s3server_commit_id }}"
    shell: cd /root/cortx/cortx-s3server && git checkout {{ s3server_commit_id }}
    delegate_to: "build-server"
    when: s3server_commit_id != ""
    ignore_errors: true

  - name: "Creating new Build location"
    file:
       path: /var/artifacts
       state: directory
       mode: '0755'
    delegate_to: "build-server"

  - name: "Generating new build using internal docker services"
    shell: time docker run --rm -v /var/artifacts:/var/artifacts -v /root/cortx:/cortx-workspace ghcr.io/seagate/cortx-re/cortx-build-internal:centos-7.8.2003 make clean io-path 
    delegate_to: "build-server"
    when: gituser is changed

  - name: "Generating new build using external docker services"
    shell: time docker run --rm -v /var/artifacts:/var/artifacts -v /root/cortx:/cortx-workspace ghcr.io/seagate/cortx-build:centos-7.8.2003 make clean io-path
    delegate_to: "build-server"
    when: gituser is skipped
  
  - name: "Archive New build rpm packages"
    archive: 
      path: /var/artifacts/0
      dest: /var/artifacts/build.tar.gz
    delegate_to: "build-server"

  - name: "Fetching newly build rpm packages to client"
    fetch:
       src: /var/artifacts/build.tar.gz
       dest: /root/build.tar.gz
       flat: yes
    delegate_to: "build-server"
  
  - name: "Removing exiting build directory"
    file:
       path: /var/artifacts
       state: absent
    delegate_to: "{{ item }}"
    with_items: "{{ groups['nodes'] }}"

  - name: "Creating new Build location on remote machine"
    file:
       path: /var/artifacts
       state: directory
       mode: '0755'
    delegate_to: "{{ item }}"
    with_items: "{{ groups['nodes'] }}"

  - name: "Copying build rpm to all servers"
    unarchive: 
       src: /root/build.tar.gz
       dest: /var/artifacts/
    delegate_to: "{{ item }}"
    with_items: "{{ groups['nodes'] }}"

  - name: "Uninstall existing mort, hare and s3server "
    yum:
       name:
         - cortx-motr
         - cortx-hare
         - cortx-s3server
       state: absent
    delegate_to: "{{ item }}"
    with_items: "{{ groups['nodes'] }}"

  - name: "Backup yum repo"
    shell: subscription-manager config --rhsm.manage_repos=0; mv /etc/yum.repos.d /etc/yum.repos.d.bak; mkdir /etc/yum.repos.d
    delegate_to: "{{ item }}"
    with_items: "{{ groups['nodes'] }}"

  
  - name: "Installing IO-Path components from new build"
    yum:
       name:
         - cortx-motr
         - cortx-hare
         - cortx-s3server
       state: present
    delegate_to: "{{ item }}"
    with_items: "{{ groups['nodes'] }}"

  - name: "Restore yum repo"
    shell: rm -rf /etc/yum.repos.d && mv /etc/yum.repos.d.bak /etc/yum.repos.d; subscription-manager config --rhsm.manage_repos=1
    delegate_to: "{{ item }}"
    with_items: "{{ groups['nodes'] }}"

  - name: "Bootstrap cluster"
    command: hctl bootstrap --mkfs /var/lib/hare/cluster.yaml
    delegate_to: "srvnode-1"

