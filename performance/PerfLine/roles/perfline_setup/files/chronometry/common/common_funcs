#!/usr/bin/env bash
#
#
# Copyright (c) 2022 Seagate Technology LLC and/or its Affiliates
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#
# -*- coding: utf-8 -*-
#


_log() {
    local nc="\033[0m"
    local red="\033[1;31m"
    local green="\033[1;32m"
    local yellow="\033[1;33m"
    local log_level=$1; shift
    case $log_level in
        err)  printf "${red}ERR: "     >&2 ;;
        warn) printf "${yellow}WARN: " >&2 ;;
        info) printf "${green}INFO: "  >&2 ;;
        *)    printf "${green}INFO: "  >&2 ;;
    esac
    echo "$@" >&2
    printf "${nc}" >&2
}

_warn() {
    _log warn "$@"
}

_err() {
    _log err "$@"
}

_info() {
    _log info "$@"
}

_check_root() {
    [[ $UID -eq 0 ]] || {
        echo 'Please, run this script with "root" privileges.' >&2
        exit 1
    }
}

_check_is_hare_cluster_online() {
    local all_services=$(hctl status | grep "\s*\[.*\]")

    local is_ha_online=$(echo "$all_services" \
                        | grep "\s*\[\s*started\s*\].*hax")

    local is_ios_online=$(echo "$all_services" \
                        | grep "\s*\[\s*started\s*\].*ioservice")

    local is_confd_online=$(echo "$all_services" \
                          | grep "\s*\[\s*started\s*\].*confd")


    #TODO: add status checking for all instances of ioservice and s3server
    local has_s3server=$(echo "$all_services" | grep s3server)
    local is_s3server_online=$(echo "$all_services" \
                           | grep "\s*\[\s*started\s*\].*s3server")

    [[ -n $is_ha_online && -n $is_ios_online && -n $is_confd_online \
    && (-z $has_s3server || -n $is_s3server_online) ]]
}

_check_is_cluster_online() {
    local all_services=$(hctl motr status | grep "\s*\[.*\]")

    local is_ha_online=$(echo "$all_services" \
                        | grep "\s*\[\s*online\s*\].*halon")

    local is_ios_online=$(echo "$all_services" \
                        | grep "\s*\[\s*online\s*\].*ioservice")

    local is_confd_online=$(echo "$all_services" \
                          | grep "\s*\[\s*online\s*\].*confd")

    local has_m0t1fs=$(echo "$all_services" | grep m0t1fs)
    local is_m0t1fs_online=$(echo "$all_services" \
                           | grep "\s*\[\s*online\s*\].*m0t1fs")

    local has_s3server=$(echo "$all_services" | grep s3server)
    local is_s3server_online=$(echo "$all_services" \
                           | grep "\s*\[\s*online\s*\].*s3server")

    [[ -n $is_ha_online && -n $is_ios_online && -n $is_confd_online \
    && (-z $has_m0t1fs || -n $is_m0t1fs_online) \
    && (-z $has_s3server || -n $is_s3server_online) ]]
}

_check_is_cluster_failed() {
    local all_services=$(hctl motr status | grep "\s*\[.*\]")

    local is_ha_failed=$(echo "$all_services" \
                        | grep "\s*\[\s*failed\s*\].*halon")

    local is_ios_failed=$(echo "$all_services" \
                        | grep "\s*\[\s*failed\s*\].*ioservice")

    local is_confd_failed=$(echo "$all_services" \
                          | grep "\s*\[\s*failed\s*\].*confd")

    local has_m0t1fs=$(echo "$all_services" | grep m0t1fs)
    local is_m0t1fs_failed=$(echo "$all_services" \
                           | grep "\s*\[\s*failed\s*\].*m0t1fs")

    local has_s3server=$(echo "$all_services" | grep s3server)
    local is_s3server_failed=$(echo "$all_services" \
                           | grep "\s*\[\s*failed\s*\].*s3server")

    [[ -n $is_ha_failed || -n $is_ios_failed || -n $is_confd_failed \
        || (-n $has_m0t1fs && -n $is_m0t1fs_failed)
        || (-n $has_s3server && -n $is_s3server_failed) ]]
}

