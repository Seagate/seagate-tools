---
#yum and pip installation are part of prepare_setup.yml

 - include: hostconfig.yml

 - include: prepare_setup.yml

 - name: Compressing directory files/PerfProBenchmark into files/PerfProBenchmark.tar.gz
   archive:
     path: "{{ role_path }}/files/PerfProBenchmark"
     dest: "{{ role_path }}/files/PerfProBenchmark.tar.gz"

 - name: Copying and Unarchieving PerfProBenchmark tar file
   unarchive:
     src: files/PerfProBenchmark.tar.gz
     dest: /root/
   delegate_to: "{{ item }}"
   with_items: "{{ groups['all'] }}"

 - name: copying config.yml file 
   copy:
     src: roles/perfpro_deployment/vars/config.yml
     dest: /root/PerfProBenchmark/
     owner: root
     group: root
     mode: '0644' 
   delegate_to: "{{ item }}"
   with_items: "{{ groups['all'] }}"
 
 - name: copying main.yml file 
   copy:
     src: vars/main.yml
     dest: /root/PerfProBenchmark/
     owner: root
     group: root
     mode: '0644'
   delegate_to: "{{ item }}"
   with_items: "{{ groups['all'] }}"

 - name: copying s3account.yml file to client
   copy:
      src: vars/s3account.yml
      dest: /root/PerfProBenchmark/
      owner: root
      group: root
      mode: '0644'
   delegate_to: "{{ item }}"
   with_items: "{{ groups['clients'] }}"

 - name: updating s3account.yml file on client with MGMT_VIP from config.yml
   shell: |
      mgmt_vip=`grep MGMT_VIP /root/PerfProBenchmark/config.yml | cut -d ":" -f2`
      sed -i "s/ip : /ip : $mgmt_vip/" /root/PerfProBenchmark/s3account.yml
   delegate_to: "{{ item }}"
   with_items: "{{ groups['clients'] }}"

 - name: Create S3 account
   command: python3 /root/PerfProBenchmark/S3UserCreation/main_createusers.py /root/PerfProBenchmark/s3account.yml 
   delegate_to: "{{ item }}"
   with_items: "{{ groups['clients'] }}"

 - include: finish_setup.yml

 - name: Make an entry for config.yml on a database
   command: python3 /root/PerfProBenchmark/addconfiguration.py '/root/PerfProBenchmark/main.yml' '/root/PerfProBenchmark/config.yml'
   delegate_to: "{{ item }}"
   with_items: "{{ groups['clients'] }}"

 - name: Read build from RELEASE.INFO file
   shell: python3 /root/PerfProBenchmark/read_build.py /root/PerfProBenchmark/config.yml
   register: build

 - name: Create perfpro_build<build> directory structure 
   shell: |
     rm -rf /root/PerfProBenchmark/perfpro_build{{ build.stdout }}
     mkdir -p /root/PerfProBenchmark/perfpro_build{{ build.stdout }}
     cd /root/PerfProBenchmark/perfpro_build{{ build.stdout }}/
     mkdir results
     mkdir logs
     mkdir logs/ansible
     mkdir configs
   delegate_to: "{{ item }}"
   with_items: "{{ groups['clients'] }}"

 - include: prefill.yml
   when: PC_FULL > 0

 - include: s3bench.yml
 
 - name: s3bench results upload to db
   shell: python3 /root/PerfProBenchmark/s3bench/s3bench_DBupdate.py /root/PerfProBenchmark/perfpro_build{{ build.stdout }}/results/s3bench /root/PerfProBenchmark/main.yml /root/PerfProBenchmark/config.yml
   delegate_to: "clientnode-1"

 - include: hsbench.yml

 - name: hsbench results upload to db
   shell: python3 /root/PerfProBenchmark/hsbench/hsbench_DBupdate.py /root/PerfProBenchmark/perfpro_build{{ build.stdout }}/results/hsbench /root/PerfProBenchmark/main.yml /root/PerfProBenchmark/config.yml
   delegate_to: "clientnode-1"

 - include: cosbench.yml

 - name: cosbench results upload to db
   shell: python3 /root/PerfProBenchmark/cosbench/cosbench_DBupdate.py /root/PerfProBenchmark/perfpro_build{{ build.stdout }}/results/cosbench /root/PerfProBenchmark/main.yml /root/PerfProBenchmark/config.yml
   delegate_to: "clientnode-1"

#Performing Degraded read benchmarking

 - include: degraded_read.yml
   when: DEGRADED_READ == True

 - name: Updating DB with degraded read entries
   shell: |
     python3 /root/PerfProBenchmark/db_scripts/hsbench_DBupdate.py /root/PerfProBenchmark/perfpro_build{{ build.stdout }}/results/degraded_read/hsbench/ /root/PerfProBenchmark/main.yml /root/PerfProBenchmark/config.yml
     python3 /root/PerfProBenchmark/db_scripts/s3bench_DBupdate.py /root/PerfProBenchmark/perfpro_build{{ build.stdout }}/results/degraded_read/s3bench/ /root/PerfProBenchmark/main.yml /root/PerfProBenchmark/config.yml
   delegate_to: "{{ item }}"
   with_items: "{{ groups['clients'] }}"
   when: DEGRADED_READ == True

#Copying ansible.log for the run to logs/ansible folder

 - name: Copying ansible log to ansible log folder
   copy:
     src: /var/log/ansible.log-{{ tstamp.stdout }}
     dest: /root/PerfProBenchmark/perfpro_build{{ build.stdout }}/logs/ansible/
   delegate_to: "{{ item }}"
   with_items: "{{ groups['clients'] }}"

#Archival of all the results and logs to NFS repository

 - name: Get timestamp from the system
   shell: "date +%F-%H-%M-%S"
   register: tstamp


 - name: Rename perfpro_build<build> directory
   shell: mv /root/PerfProBenchmark/perfpro_build{{ build.stdout }} /root/PerfProBenchmark/perfpro_build{{ build.stdout }}_{{ tstamp.stdout }}
   delegate_to: "{{ item }}"
   with_items: "{{ groups['clients'] }}"


 - name: Archiving artifacts to NFS server
   shell: |
     cd /root/PerfProBenchmark/ 
     python3 /root/PerfProBenchmark/archive_artifacts.py /root/PerfProBenchmark/config.yml perfpro_build{{ build.stdout }}_{{ tstamp.stdout }}
   delegate_to: "{{ item }}"
   with_items: "{{ groups['clients'] }}"


